name: Lighthouse & Build Time Checker
on:
  pull_request:
    branches: [main, development]
  push:
    branches: [main]
permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install dependencies
        run: |
          yarn set version berry
          yarn install

      - name: Build Next.js app
        id: build_nextjs
        run: |
          BUILD_START_TIME=$(date +%s)
          echo "Build started at $(date)"
          time yarn build
          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "Build finished at $(date)"
          echo "BUILD_DURATION=$BUILD_DURATION" >> $GITHUB_ENV
        env:
          NEXT_PUBLIC_API_BASE_URL: https://api-dev.kokomen.kr/api/v1
          NEXT_PUBLIC_BASE_URL: https://localhost:3000
      - name: Set build Duration
        if: github.event_name == 'pull_request'
        id: set_duration
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const buildDuration = process.env.BUILD_DURATION;
            const buildDurationString = buildDuration ? `# Build Information\n🕒 빌드 시간: ${buildDuration}초` : "";
            core.setOutput('buildDuration', buildDurationString);

      - name: Build Duration Comment
        if: github.event_name == 'pull_request'
        uses: unsplash/comment-on-pr@v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: ${{ steps.set_duration.outputs.buildDuration }}
      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: yarn lhci || echo "Failed to run Lighthouse CI"
      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |

            const fs = require('fs');

            // 파일 경로 수정 (실제 경로로 변경 필요)
            const results = JSON.parse(fs.readFileSync("./apps/client/lhci_reports/manifest.json"));

            let comments = "";

            results.forEach((result, idx) => {
                const { summary, jsonPath } = result;
                
                // details 변수를 summary 뒤에 선언
                const details = JSON.parse(fs.readFileSync(jsonPath));
                const { audits } = details;

                const formatResult = (res) => Math.round(res * 100);

                Object.keys(summary).forEach(
                (key) => (summary[key] = formatResult(summary[key]))
                );

                // 점수 색상 함수
                const score = (res) => (res >= 90 ? "🟢" : res >= 50 ? "🟠" : "🔴");

                const comment = [
                ``,
                `## 🚀 Lighthouse Report for TEST${idx+1}`,
                `### 📅 Date: ${new Date().toLocaleDateString()}`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                `| ${score(summary.accessibility)} Accessibility | ${summary.accessibility} |`,
                `| ${score(summary['best-practices'])} Best Practices | ${summary['best-practices']} |`,
                `| ${score(summary.seo)} SEO | ${summary.seo} |`
                ].join("\n");

                const detail = [
                ``,
                `### 📊 Performance Details`,
                `| Metric | Score | Value |`,
                `| --- | --- | --- |`,
                `| ${score(Math.round(audits["first-contentful-paint"].score * 100))} First Contentful Paint | ${Math.round(audits["first-contentful-paint"].score * 100)} | ${audits["first-contentful-paint"].displayValue} |`,
                `| ${score(Math.round(audits["largest-contentful-paint"].score * 100))} Largest Contentful Paint | ${Math.round(audits["largest-contentful-paint"].score * 100)} | ${audits["largest-contentful-paint"].displayValue} |`,
                `| ${score(Math.round(audits["cumulative-layout-shift"].score * 100))} Cumulative Layout Shift | ${Math.round(audits["cumulative-layout-shift"].score * 100)} | ${audits["cumulative-layout-shift"].displayValue} |`
                ].join("\n");
                
                comments += comment + "\n" + detail + "\n\n";
                }); 

            // 출력 설정
                core.setOutput('comments', comments);
      - name: Lighthouse Score Comment
        if: github.event_name == 'pull_request'
        uses: unsplash/comment-on-pr@v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: ${{ steps.format_lighthouse_score.outputs.comments }}
