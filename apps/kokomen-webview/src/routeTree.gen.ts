/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as InterviewsIndexRouteImport } from './routes/interviews/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as TermsTermsofuseRouteImport } from './routes/terms/termsofuse'
import { Route as TermsPrivacyRouteImport } from './routes/terms/privacy'
import { Route as MembersMemberIdRouteImport } from './routes/members/$memberId'
import { Route as LoginProfileRouteImport } from './routes/login/profile'
import { Route as LoginCallbackRouteImport } from './routes/login/callback'
import { Route as InterviewsInterviewIdIndexRouteImport } from './routes/interviews/$interviewId/index'
import { Route as MembersInterviewsInterviewIdRouteImport } from './routes/members/interviews.$interviewId'
import { Route as LoginGoogleCallbackRouteImport } from './routes/login/google.callback'
import { Route as InterviewsInterviewIdResultRouteImport } from './routes/interviews/$interviewId/result'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const InterviewsIndexRoute = InterviewsIndexRouteImport.update({
  id: '/interviews/',
  path: '/interviews/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsTermsofuseRoute = TermsTermsofuseRouteImport.update({
  id: '/terms/termsofuse',
  path: '/terms/termsofuse',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsPrivacyRoute = TermsPrivacyRouteImport.update({
  id: '/terms/privacy',
  path: '/terms/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const MembersMemberIdRoute = MembersMemberIdRouteImport.update({
  id: '/members/$memberId',
  path: '/members/$memberId',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginProfileRoute = LoginProfileRouteImport.update({
  id: '/login/profile',
  path: '/login/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginCallbackRoute = LoginCallbackRouteImport.update({
  id: '/login/callback',
  path: '/login/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const InterviewsInterviewIdIndexRoute =
  InterviewsInterviewIdIndexRouteImport.update({
    id: '/interviews/$interviewId/',
    path: '/interviews/$interviewId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const MembersInterviewsInterviewIdRoute =
  MembersInterviewsInterviewIdRouteImport.update({
    id: '/members/interviews/$interviewId',
    path: '/members/interviews/$interviewId',
    getParentRoute: () => rootRouteImport,
  } as any)
const LoginGoogleCallbackRoute = LoginGoogleCallbackRouteImport.update({
  id: '/login/google/callback',
  path: '/login/google/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const InterviewsInterviewIdResultRoute =
  InterviewsInterviewIdResultRouteImport.update({
    id: '/interviews/$interviewId/result',
    path: '/interviews/$interviewId/result',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login/callback': typeof LoginCallbackRoute
  '/login/profile': typeof LoginProfileRoute
  '/members/$memberId': typeof MembersMemberIdRoute
  '/terms/privacy': typeof TermsPrivacyRoute
  '/terms/termsofuse': typeof TermsTermsofuseRoute
  '/dashboard': typeof DashboardIndexRoute
  '/interviews': typeof InterviewsIndexRoute
  '/login': typeof LoginIndexRoute
  '/interviews/$interviewId/result': typeof InterviewsInterviewIdResultRoute
  '/login/google/callback': typeof LoginGoogleCallbackRoute
  '/members/interviews/$interviewId': typeof MembersInterviewsInterviewIdRoute
  '/interviews/$interviewId': typeof InterviewsInterviewIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login/callback': typeof LoginCallbackRoute
  '/login/profile': typeof LoginProfileRoute
  '/members/$memberId': typeof MembersMemberIdRoute
  '/terms/privacy': typeof TermsPrivacyRoute
  '/terms/termsofuse': typeof TermsTermsofuseRoute
  '/dashboard': typeof DashboardIndexRoute
  '/interviews': typeof InterviewsIndexRoute
  '/login': typeof LoginIndexRoute
  '/interviews/$interviewId/result': typeof InterviewsInterviewIdResultRoute
  '/login/google/callback': typeof LoginGoogleCallbackRoute
  '/members/interviews/$interviewId': typeof MembersInterviewsInterviewIdRoute
  '/interviews/$interviewId': typeof InterviewsInterviewIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login/callback': typeof LoginCallbackRoute
  '/login/profile': typeof LoginProfileRoute
  '/members/$memberId': typeof MembersMemberIdRoute
  '/terms/privacy': typeof TermsPrivacyRoute
  '/terms/termsofuse': typeof TermsTermsofuseRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/interviews/': typeof InterviewsIndexRoute
  '/login/': typeof LoginIndexRoute
  '/interviews/$interviewId/result': typeof InterviewsInterviewIdResultRoute
  '/login/google/callback': typeof LoginGoogleCallbackRoute
  '/members/interviews/$interviewId': typeof MembersInterviewsInterviewIdRoute
  '/interviews/$interviewId/': typeof InterviewsInterviewIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login/callback'
    | '/login/profile'
    | '/members/$memberId'
    | '/terms/privacy'
    | '/terms/termsofuse'
    | '/dashboard'
    | '/interviews'
    | '/login'
    | '/interviews/$interviewId/result'
    | '/login/google/callback'
    | '/members/interviews/$interviewId'
    | '/interviews/$interviewId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login/callback'
    | '/login/profile'
    | '/members/$memberId'
    | '/terms/privacy'
    | '/terms/termsofuse'
    | '/dashboard'
    | '/interviews'
    | '/login'
    | '/interviews/$interviewId/result'
    | '/login/google/callback'
    | '/members/interviews/$interviewId'
    | '/interviews/$interviewId'
  id:
    | '__root__'
    | '/'
    | '/login/callback'
    | '/login/profile'
    | '/members/$memberId'
    | '/terms/privacy'
    | '/terms/termsofuse'
    | '/dashboard/'
    | '/interviews/'
    | '/login/'
    | '/interviews/$interviewId/result'
    | '/login/google/callback'
    | '/members/interviews/$interviewId'
    | '/interviews/$interviewId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginCallbackRoute: typeof LoginCallbackRoute
  LoginProfileRoute: typeof LoginProfileRoute
  MembersMemberIdRoute: typeof MembersMemberIdRoute
  TermsPrivacyRoute: typeof TermsPrivacyRoute
  TermsTermsofuseRoute: typeof TermsTermsofuseRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  InterviewsIndexRoute: typeof InterviewsIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  InterviewsInterviewIdResultRoute: typeof InterviewsInterviewIdResultRoute
  LoginGoogleCallbackRoute: typeof LoginGoogleCallbackRoute
  MembersInterviewsInterviewIdRoute: typeof MembersInterviewsInterviewIdRoute
  InterviewsInterviewIdIndexRoute: typeof InterviewsInterviewIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/interviews/': {
      id: '/interviews/'
      path: '/interviews'
      fullPath: '/interviews'
      preLoaderRoute: typeof InterviewsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms/termsofuse': {
      id: '/terms/termsofuse'
      path: '/terms/termsofuse'
      fullPath: '/terms/termsofuse'
      preLoaderRoute: typeof TermsTermsofuseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms/privacy': {
      id: '/terms/privacy'
      path: '/terms/privacy'
      fullPath: '/terms/privacy'
      preLoaderRoute: typeof TermsPrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/members/$memberId': {
      id: '/members/$memberId'
      path: '/members/$memberId'
      fullPath: '/members/$memberId'
      preLoaderRoute: typeof MembersMemberIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/profile': {
      id: '/login/profile'
      path: '/login/profile'
      fullPath: '/login/profile'
      preLoaderRoute: typeof LoginProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/callback': {
      id: '/login/callback'
      path: '/login/callback'
      fullPath: '/login/callback'
      preLoaderRoute: typeof LoginCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/interviews/$interviewId/': {
      id: '/interviews/$interviewId/'
      path: '/interviews/$interviewId'
      fullPath: '/interviews/$interviewId'
      preLoaderRoute: typeof InterviewsInterviewIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/members/interviews/$interviewId': {
      id: '/members/interviews/$interviewId'
      path: '/members/interviews/$interviewId'
      fullPath: '/members/interviews/$interviewId'
      preLoaderRoute: typeof MembersInterviewsInterviewIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/google/callback': {
      id: '/login/google/callback'
      path: '/login/google/callback'
      fullPath: '/login/google/callback'
      preLoaderRoute: typeof LoginGoogleCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/interviews/$interviewId/result': {
      id: '/interviews/$interviewId/result'
      path: '/interviews/$interviewId/result'
      fullPath: '/interviews/$interviewId/result'
      preLoaderRoute: typeof InterviewsInterviewIdResultRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginCallbackRoute: LoginCallbackRoute,
  LoginProfileRoute: LoginProfileRoute,
  MembersMemberIdRoute: MembersMemberIdRoute,
  TermsPrivacyRoute: TermsPrivacyRoute,
  TermsTermsofuseRoute: TermsTermsofuseRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  InterviewsIndexRoute: InterviewsIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  InterviewsInterviewIdResultRoute: InterviewsInterviewIdResultRoute,
  LoginGoogleCallbackRoute: LoginGoogleCallbackRoute,
  MembersInterviewsInterviewIdRoute: MembersInterviewsInterviewIdRoute,
  InterviewsInterviewIdIndexRoute: InterviewsInterviewIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
